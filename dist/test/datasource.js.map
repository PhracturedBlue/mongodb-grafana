{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","db","jsonData","mongodb_url","mongodb_db","id","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","then","res","_","forEach","result","results","r","series","push","target","s","datapoints","points","tables","refId","map","queryType","replace","scopedVars","datasourceId","doDirectRequest","method","response","status","message","title","display_status","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","getAdhocFilters","adhocFilters","$$status","$$config","config","timeRange","mapToTextValue","table","search","rows","row","i","text","value","isObject","datasourceRequest","from","valueOf","toString","to","queries","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.db = { 'url' : instanceSettings.jsonData.mongodb_url, 'db' : instanceSettings.jsonData.mongodb_db }\n    this.id = instanceSettings.id;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n    query.db = this.db\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest(query)\n    .then(result => {\n      var res= [];\n      _.forEach(result.data.results, r => {\n        _.forEach(r.series, s => {\n          res.push({target: s.name, datapoints: s.points});\n        })\n        _.forEach(r.tables, t => {\n          t.type = 'table';\n          t.refId = r.refId;\n          res.push(t);\n        })\n      })\n\n      result.data = res;\n      return result;\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        queryType: 'query',\n        target: this.templateSrv.replace(target.target, options.scopedVars, ''),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        datasourceId: this.id\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  testDatasource() {\n    return this.doDirectRequest({\n      url: this.url + '/',\n      data : { db : this.db },\n      method: 'POST',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: response.data.status, message: response.data.message, title: response.data.display_status };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.doDirectRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      response.data.$$status = result.status;\n      response.data.$$config = result.config;\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var range = this.timeSrv.timeRange();\n    var targets = [{\n      queryType: 'search',\n      target: this.templateSrv.replace(query, null, ''),\n      db: this.db,\n      datasourceId: this.id,\n      refId: \"search\",\n    }];\n    var options = {\n      range: range,\n      targets: targets\n    };\n    return this.doRequest(options).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    var table = result.data.results.search.tables[0];\n\n    if (!table) {\n      return [];\n    }\n\n    return _.map(table.rows, (row, i) => {\n      if (row.length > 1) {\n        return { text: row[0], value: row[1] };\n      } else if (_.isObject(row[0])) {\n        return { text: row[0], value: i};\n      }\n      return { text: row[0], value: row[0] };\n    });\n  }\n\n  doDirectRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  doRequest(options) {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: options.targets,\n      }\n    });\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}